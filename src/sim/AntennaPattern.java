package sim;

import signal.Oscillator;

public class AntennaPattern {

	// Quarter Qave from EZNEC in free space
	double pattern[] = { 1.76,
			1,
			1,
			1,
			0.99990173,
			0.999803459,
			0.999705189,
			0.999606918,
			0.999410377,
			0.999213836,
			0.998919025,
			0.998624214,
			0.998329403,
			0.998034591,
			0.997641509,
			0.997248428,
			0.996855346,
			0.996363994,
			0.995872642,
			0.995381289,
			0.994791667,
			0.994300314,
			0.993612421,
			0.993022799,
			0.992334906,
			0.991647013,
			0.990860849,
			0.990074686,
			0.989288522,
			0.988404088,
			0.987519654,
			0.98663522,
			0.985652516,
			0.984669811,
			0.983687107,
			0.982606132,
			0.981525157,
			0.980345912,
			0.979166667,
			0.977889151,
			0.976611635,
			0.975334119,
			0.973958333,
			0.972582547,
			0.971108491,
			0.969634434,
			0.968062107,
			0.966391509,
			0.964819182,
			0.963050314,
			0.961281447,
			0.959414308,
			0.95754717,
			0.955581761,
			0.953518082,
			0.951454403,
			0.949292453,
			0.947032233,
			0.944673742,
			0.942315252,
			0.93976022,
			0.937106918,
			0.934453616,
			0.931603774,
			0.92865566,
			0.925609277,
			0.922366352,
			0.919025157,
			0.915585692,
			0.911949686,
			0.908117138,
			0.90398978,
			0.899764151,
			0.895243711,
			0.890428459,
			0.885416667,
			0.880011792,
			0.874115566,
			0.867924528,
			0.861143868,
			0.853773585,
			0.845715409,
			0.836772799,
			0.826749214,
			0.815349843,
			0.802279874,
			0.786753145,
			0.767688679,
			0.74321934,
			0.708628145,
			0.64946934,
			9.82704E-05,
			0.64946934,
			0.708628145,
			0.74321934,
			0.767688679,
			0.786753145,
			0.802279874,
			0.815349843,
			0.826749214,
			0.836772799,
			0.845715409,
			0.853773585,
			0.861143868,
			0.867924528,
			0.874115566,
			0.880011792,
			0.885416667,
			0.890428459,
			0.895243711,
			0.899764151,
			0.90398978,
			0.908117138,
			0.911949686,
			0.915585692,
			0.919025157,
			0.922366352,
			0.925609277,
			0.92865566,
			0.931603774,
			0.934453616,
			0.937106918,
			0.93976022,
			0.942315252,
			0.944673742,
			0.947032233,
			0.949292453,
			0.951454403,
			0.953518082,
			0.955581761,
			0.95754717,
			0.959414308,
			0.961281447,
			0.963050314,
			0.964819182,
			0.966391509,
			0.968062107,
			0.969634434,
			0.971108491,
			0.972582547,
			0.973958333,
			0.975334119,
			0.976611635,
			0.977889151,
			0.979166667,
			0.980345912,
			0.981525157,
			0.982606132,
			0.983687107,
			0.984669811,
			0.985652516,
			0.98663522,
			0.987519654,
			0.988404088,
			0.989288522,
			0.990074686,
			0.990860849,
			0.991647013,
			0.992334906,
			0.993022799,
			0.993612421,
			0.994300314,
			0.994791667,
			0.995381289,
			0.995872642,
			0.996363994,
			0.996855346,
			0.997248428,
			0.997641509,
			0.998034591,
			0.998329403,
			0.998624214,
			0.998919025,
			0.999213836,
			0.999410377,
			0.999606918,
			0.999705189,
			0.999803459,
			0.99990173,
			1,
			1,
			1,
			1,
			1,
			0.99990173,
			0.999803459,
			0.999606918,
			0.999508648,
			0.999312107,
			0.999017296,
			0.998820755,
			0.998525943,
			0.998132862,
			0.99783805,
			0.997444969,
			0.997051887,
			0.996560535,
			0.996167453,
			0.99557783,
			0.995086478,
			0.994496855,
			0.993907233,
			0.99331761,
			0.992629717,
			0.991941824,
			0.991253931,
			0.990467767,
			0.989681604,
			0.98879717,
			0.988011006,
			0.987126572,
			0.986143868,
			0.985161164,
			0.984178459,
			0.983097484,
			0.982016509,
			0.980935535,
			0.979756289,
			0.978577044,
			0.977299528,
			0.976022013,
			0.974744497,
			0.973368711,
			0.971894654,
			0.970420597,
			0.968946541,
			0.967374214,
			0.965703616,
			0.964033019,
			0.962362421,
			0.960495283,
			0.958726415,
			0.956761006,
			0.954795597,
			0.952731918,
			0.950668239,
			0.948506289,
			0.946246069,
			0.943887579,
			0.941430818,
			0.938875786,
			0.936320755,
			0.933569182,
			0.93071934,
			0.927771226,
			0.924724843,
			0.921481918,
			0.918140723,
			0.914701258,
			0.910966981,
			0.907134434,
			0.903105346,
			0.898781447,
			0.894359277,
			0.889544025,
			0.884433962,
			0.879029088,
			0.873231132,
			0.866941824,
			0.860161164,
			0.852790881,
			0.844732704,
			0.835790094,
			0.825766509,
			0.814465409,
			0.80129717,
			0.78577044,
			0.766705975,
			0.742236635,
			0.70764544,
			0.648486635,
			9.82704E-05,
			0.648486635,
			0.70764544,
			0.742236635,
			0.766705975,
			0.78577044,
			0.80129717,
			0.814465409,
			0.825766509,
			0.835790094,
			0.844732704,
			0.852790881,
			0.860161164,
			0.866941824,
			0.873231132,
			0.879029088,
			0.884433962,
			0.889544025,
			0.894359277,
			0.898781447,
			0.903105346,
			0.907134434,
			0.910966981,
			0.914701258,
			0.918140723,
			0.921481918,
			0.924724843,
			0.927771226,
			0.93071934,
			0.933569182,
			0.936320755,
			0.938875786,
			0.941430818,
			0.943887579,
			0.946246069,
			0.948506289,
			0.950668239,
			0.952731918,
			0.954795597,
			0.956761006,
			0.958726415,
			0.960495283,
			0.962362421,
			0.964033019,
			0.965703616,
			0.967374214,
			0.968946541,
			0.970420597,
			0.971894654,
			0.973368711,
			0.974744497,
			0.976022013,
			0.977299528,
			0.978577044,
			0.979756289,
			0.980935535,
			0.982016509,
			0.983097484,
			0.984178459,
			0.985161164,
			0.986143868,
			0.987126572,
			0.988011006,
			0.98879717,
			0.989681604,
			0.990467767,
			0.991253931,
			0.991941824,
			0.992629717,
			0.99331761,
			0.993907233,
			0.994496855,
			0.995086478,
			0.99557783,
			0.996167453,
			0.996560535,
			0.997051887,
			0.997444969,
			0.99783805,
			0.998132862,
			0.998525943,
			0.998820755,
			0.999017296,
			0.999312107,
			0.999508648,
			0.999606918,
			0.999803459,
			0.99990173,
			1,
			1,
			1

	};

	/**
	 * We have a table that equals 360 degrees.
	 * In 1 second we process sampleRate samples
	 * Each time we ask for a sample we increment freq*360/sampleRate
	 * 
	 */
	int TABLE_SIZE;
	int freq;
	int sampleRate;
	
	public AntennaPattern(int samples, int freq) {
		this.sampleRate = samples;
		this.freq = freq;
		this.TABLE_SIZE = pattern.length;
		
		System.out.println("Made 1/4 wave pattern");
	}
	
	double phase = 0;
	public double nextSample() {
		double inc = freq*TABLE_SIZE/(double)sampleRate;
		phase = phase + inc;
		if (phase > TABLE_SIZE)
			phase = phase - TABLE_SIZE;
		
		double value = pattern[(int)phase];
		double roundOff = Math.round(value * 100.0) / 100.0;

		return roundOff;
	}
}
